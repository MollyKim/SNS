{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kosun\\\\Desktop\\\\react-sns\\\\ReactNodeBird\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Card, Avatar, Icon, Form, Input, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from '../node_modules/react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isaddingComment = _useSelector2.isaddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleFormOpened = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return;\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function () {\n    setCommentText(e.tagrget.vaule);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.img && React.createElement(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })],\n    extra: React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"\\uCE5C\\uAD6C\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Form.item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(Button, {\n    tupe: \"primary\",\n    htmlType: \"submit\",\n    loading: \"isaddingComment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"\\uB313\\uAE00\\uC4F0\\uAE30\")), React.createElement(List, {\n    header: '${post.Comments ? post.Comments.length:0}댓글',\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content //datetime={item.createdAt}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    USer: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/kosun/Desktop/react-sns/ReactNodeBird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","List","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isaddingComment","dispatch","onToggleFormOpened","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","tagrget","vaule","createdAt","img","onToggleComment","User","nickname","content","Comments","item","propTypes","shape","USer","object","string"],"mappings":"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","sourcesContent":["import React, {useState, useCallback,useEffect} from 'react';\r\nimport {Button,Card,Avatar,Icon,Form,Input,List,Comment} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector,useDispatch } from '../node_modules/react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst PostCard = ({post}) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText,setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const {commentAdded,isaddingComment} = useSelector(state=>state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleFormOpened = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    },[]);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return\r\n            dispatch({\r\n                type:ADD_COMMENT_REQUEST,\r\n                data:{\r\n                    postId:post.id,\r\n                },\r\n            });\r\n    },[me && me.id]);\r\n\r\n    useEffect(()=>{\r\n        setCommentText('');\r\n    },[commentAdded===true]);\r\n\r\n    const onChangeCommentText = useCallback(() => {\r\n        setCommentText(e.tagrget.vaule);\r\n    },[]);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} />}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick= {onToggleComment}/>,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n            ]}\r\n            extra={<Button>친구</Button>}\r\n            >\r\n            <Card.Meta\r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={post.content}\r\n                />\r\n            </Card>\r\n                {commentFormOpened && (\r\n                    <>\r\n                        <Form onSubmit={onSubmitComment}>\r\n                            <Form.item>\r\n                                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}/>\r\n                            </Form.item>\r\n                            <Button tupe=\"primary\" htmlType=\"submit\" loading=\"isaddingComment\" >댓글쓰기</Button>\r\n                        </Form>\r\n                        <List header={'${post.Comments ? post.Comments.length:0}댓글'}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments||[]}\r\n                        renderItem={item=>(\r\n                            <li>\r\n                                <Comment author={item.User.nickname}\r\n                                        avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                        content={item.content}\r\n                                        //datetime={item.createdAt}\r\n                                />\r\n                            </li>\r\n                            \r\n                        )}\r\n                        />\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\nPostCard.propTypes = { \r\n    post: PropTypes.shape({\r\n        USer: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}