{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(signupAPI),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", axios.post('/login'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            //reducer의 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 11:\n          ;\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signupAPI() {\n  return _regeneratorRuntime.wrap(function signupAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", axios.post('/signUp'));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(signupAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            //reducer의 dispatch와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context5.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvry(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut) //fork(watchLoadUser),\n          //fork(watchSignUp),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/kosun/Desktop/react-sns/ReactNodeBird/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","signupAPI","signUp","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","post","delay","type","error","takeEvry","watchLogIn","watchLogOut"],"mappings":";;oDAMUA,Q;qDAGAC,K;qDAaAC,U;qDAMAC,S;qDAGAC,M;qDAcAC,W;qDAKeC,Q;;AAlDzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,SAA/B,EAA0CC,IAA1C,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,SAAQC,cAAR,EAAuBC,cAAvB,EAAsCC,cAAtC,QAA2D,kBAA3D;AACA,SAAQC,eAAR,EAAwBC,eAAxB,EAAwCC,eAAxC,QAA8D,kBAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAAUnB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA,2CACWmB,KAAK,CAACC,IAAN,CAAW,QAAX,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUnB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMoB,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMT,GAAG,CAAC;AAAE;AACRU,YAAAA,IAAI,EAACR;AADC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMF,GAAG,CAAC;AACNU,YAAAA,IAAI,EAACP;AADC,WAAD,CAAT;;AARR;AAWK;;AAXL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,SAAS,CAACG,cAAD,EAAgBZ,KAAhB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,4CACWgB,KAAK,CAACC,IAAN,CAAW,SAAX,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUhB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACR,SAAD,CAAV;;AAFR;AAAA;AAIQ,iBAAMS,GAAG,CAAC;AAAE;AACRU,YAAAA,IAAI,EAACL;AADC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAML,GAAG,CAAC;AACNU,YAAAA,IAAI,EAACJ,eADC;AAENK,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUlB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMmB,QAAQ,CAACR,eAAD,EAAiBZ,MAAjB,CAAd;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,WAAD,CAFE,CAGN;AACA;AAJM,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, takeLatest, takeEvery, call, put } from 'redux-saga/effects';\r\nimport {LOG_IN_REQUEST,LOG_IN_SUCCESS,LOG_IN_FAILURE} from '../reducers/user';\r\nimport {SIGN_UP_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_FAILURE} from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction* loginAPI(){ //서버에 요청을 보내는 부분\r\n    return axios.post('/login');\r\n}\r\nfunction* login(){\r\n    try{\r\n        //yield call(loginAPI);\r\n        yield delay(2000);\r\n        yield put({ //reducer의 dispatch와 동일\r\n            type:LOG_IN_SUCCESS,\r\n        });\r\n    }catch(e){ //loginAPI 실패시\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n    });\r\n    };\r\n}\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST,login)\r\n}\r\n\r\n\r\n\r\nfunction* signupAPI(){ //서버에 요청을 보내는 부분\r\n    return axios.post('/signUp');\r\n}\r\nfunction* signUp(){//와치했을때 무엇을 할지 정하는 함수\r\n    try{\r\n        yield call(signupAPI);\r\n        //yield throw new Error('문제발생');\r\n        yield put({ //reducer의 dispatch와 동일\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(e){ //loginAPI 실패시\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error:e,\r\n    });\r\n}\r\n}\r\nfunction* watchSignUp(){ //등록한 이름을 와치하는 함수\r\n    yield takeEvry(SIGN_UP_REQUEST,signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        //fork(watchLoadUser),\r\n        //fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}