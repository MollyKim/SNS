{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addcomment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENTT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post'; //세개의 함수가 세트로!\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //세개의 함수가 세트로!\n\n\nfunction addCommentAPI() {}\n\nfunction addcomment(action) {\n  return _regeneratorRuntime.wrap(function addcomment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //생성\n\n\nexport default function postSaga(params) {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/kosun/Desktop/react-sns/ReactNodeBird/front/sagas/post.js"],"names":["addPost","watchAddPost","addcomment","watchAddComment","postSaga","all","fork","takeLatest","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENTT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","type","error","addCommentAPI","action","ADD_COMMENT_SUCCESS","data","postId","addComment","params"],"mappings":";;oDASUA,O;qDAaAC,Y;qDAQAC,U;qDAcAC,e;qDAKeC,Q;;AAjDzB,SAASC,GAAT,EAAcC,IAAd,EAAmBC,UAAnB,EAA8BC,GAA9B,EAAkCC,KAAlC,QAA+C,oBAA/C;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,QAAqE,kBAArE;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,mBAApD,QAA+E,kBAA/E,C,CAGA;;AACA,SAASC,UAAT,GAAsB,CAErB;;AACD,SAAUhB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACN;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMH,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACL,gBADC;AAENM,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACG,gBAAD,EAAkBV,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAASmB,aAAT,GAAyB,CAExB;;AACD,SAAUjB,UAAV,CAAqBkB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMX,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACI,mBADC;AAENC,YAAAA,IAAI,EAAC;AAACC,cAAAA,MAAM,EAACH,MAAM,CAACE,IAAP,CAAYC;AAApB;AAFC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMf,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACF,mBADC;AAENG,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUf,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACM,mBAAD,EAAqBW,UAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,eAAe,SAAUpB,QAAV,CAAmBqB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMpB,GAAG,CAAC,CACNC,IAAI,CAACL,YAAD,CADE,EAENK,IAAI,CAACH,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork,takeLatest,put,delay } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENTT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\r\n\r\n\r\n//세개의 함수가 세트로!\r\nfunction addPostAPI() {\r\n\r\n}\r\nfunction* addPost() {\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\n//세개의 함수가 세트로!\r\nfunction addCommentAPI() {\r\n\r\n}\r\nfunction* addcomment(action) {\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{postId:action.data.postId,},\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error:e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\n//생성\r\nexport default function* postSaga(params) {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}